2023-02-05 19:50:18,423 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.105
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 19:50:18,425 - mmcls - INFO - Distributed training: False
2023-02-05 19:50:18,541 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower/train.txt',
        classes='data/flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower/val',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/data/home/scv8939/run/mmclassification/checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = './work_dirs/resnet18_bs32_flower'
gpu_ids = [0]

2023-02-05 19:50:18,545 - mmcls - INFO - Set random seed to 1598725995, deterministic: False
2023-02-05 19:50:18,684 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 19:50:18,776 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 19:50:28,790 - mmcls - INFO - load checkpoint from local path: /data/home/scv8939/run/mmclassification/checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth
2023-02-05 19:50:28,967 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 19:50:28,968 - mmcls - INFO - Start running, host: scv8939@g0039, work_dir: /data/run01/scv8939/mmclassification/work_dirs/resnet18_bs32_flower
2023-02-05 19:50:28,968 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 19:50:28,968 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 19:50:28,968 - mmcls - INFO - Checkpoints will be saved to /data/run01/scv8939/mmclassification/work_dirs/resnet18_bs32_flower by HardDiskBackend.
2023-02-05 19:50:38,993 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 19:50:41,377 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.5493, accuracy_top-5: 100.0000
2023-02-05 19:50:48,279 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 19:50:50,096 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.7254, accuracy_top-5: 100.0000
2023-02-05 19:50:56,948 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 19:50:58,567 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 91.5493, accuracy_top-5: 100.0000
2023-02-05 19:51:05,589 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 19:51:07,354 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 91.0211, accuracy_top-5: 100.0000
2023-02-05 19:51:14,336 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 19:51:16,020 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 91.1972, accuracy_top-5: 100.0000
2023-02-05 19:51:22,941 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 19:51:24,511 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 92.0775, accuracy_top-5: 100.0000
2023-02-05 19:51:31,315 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 19:51:32,970 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 92.0775, accuracy_top-5: 100.0000
2023-02-05 19:51:39,777 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 19:51:41,737 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 91.3732, accuracy_top-5: 100.0000
2023-02-05 19:51:48,540 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 19:51:50,094 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 92.4296, accuracy_top-5: 100.0000
2023-02-05 19:51:56,914 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 19:51:58,522 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 92.9577, accuracy_top-5: 100.0000
2023-02-05 19:52:05,443 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 19:52:07,017 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.1338, accuracy_top-5: 100.0000
2023-02-05 19:52:13,913 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 19:52:15,573 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 92.9577, accuracy_top-5: 100.0000
2023-02-05 19:52:23,079 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 19:52:24,703 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 92.9577, accuracy_top-5: 100.0000
2023-02-05 19:52:31,620 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 19:52:33,226 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 92.2535, accuracy_top-5: 100.0000
2023-02-05 19:52:40,257 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 19:52:41,879 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 92.9577, accuracy_top-5: 100.0000
2023-02-05 19:52:48,871 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 19:52:50,405 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 92.4296, accuracy_top-5: 100.0000
2023-02-05 19:52:57,319 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 19:52:58,874 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.1338, accuracy_top-5: 100.0000
2023-02-05 19:53:05,783 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 19:53:07,350 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:53:14,517 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 19:53:16,109 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 92.7817, accuracy_top-5: 100.0000
2023-02-05 19:53:23,055 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 19:53:24,613 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:53:31,543 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 19:53:33,491 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 19:53:40,286 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 19:53:41,809 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 92.9577, accuracy_top-5: 100.0000
2023-02-05 19:53:48,680 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 19:53:50,270 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 19:53:57,237 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 19:53:58,848 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 93.4859, accuracy_top-5: 100.0000
2023-02-05 19:54:05,835 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 19:54:07,536 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 19:54:14,340 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 19:54:15,900 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 19:54:22,658 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 19:54:24,304 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:54:31,204 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 19:54:32,842 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 19:54:39,641 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 19:54:41,164 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 19:54:48,036 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 19:54:49,616 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 19:54:56,432 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 19:54:57,952 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 19:55:04,857 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 19:55:06,416 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:55:13,304 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 19:55:14,840 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 19:55:21,972 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 19:55:23,598 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 19:55:30,660 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 19:55:32,334 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 19:55:39,231 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 19:55:40,769 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 19:55:47,460 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 19:55:49,029 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 19:55:55,859 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 19:55:57,428 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:56:04,514 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 19:56:06,107 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:56:13,050 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 19:56:14,598 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:56:21,496 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 19:56:23,098 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:56:30,113 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 19:56:31,820 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 19:56:38,803 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 19:56:40,350 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 19:56:47,629 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 19:56:49,278 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 19:56:56,187 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 19:56:57,758 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 19:57:04,665 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 19:57:06,186 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:57:12,908 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 19:57:14,480 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:57:21,320 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 19:57:22,934 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:57:30,482 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 19:57:32,055 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:57:39,555 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 19:57:41,124 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:57:48,263 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 19:57:49,818 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 19:57:56,642 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 19:57:58,274 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:58:05,166 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 19:58:06,770 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 19:58:13,763 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 19:58:15,406 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:58:22,313 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 19:58:23,917 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 19:58:30,847 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 19:58:32,393 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 95.7747, accuracy_top-5: 100.0000
2023-02-05 19:58:39,201 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 19:58:40,946 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 19:58:47,883 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 19:58:49,472 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:58:56,258 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 19:58:57,842 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.7747, accuracy_top-5: 100.0000
2023-02-05 19:59:04,799 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 19:59:06,431 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 19:59:13,538 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 19:59:15,272 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 19:59:22,436 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 19:59:24,057 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 19:59:30,937 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 19:59:32,526 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 19:59:39,320 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 19:59:40,873 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 19:59:48,024 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 19:59:49,550 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 19:59:56,500 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 19:59:58,091 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.9507, accuracy_top-5: 100.0000
2023-02-05 20:00:05,116 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 20:00:06,657 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:00:13,393 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 20:00:14,986 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:00:22,022 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 20:00:23,633 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:00:30,841 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 20:00:32,451 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 20:00:39,852 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 20:00:41,407 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 20:00:48,431 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 20:00:50,015 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:00:57,346 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 20:00:58,917 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 20:01:05,726 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 20:01:07,270 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:01:14,092 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 20:01:15,626 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:01:22,553 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 20:01:24,191 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 20:01:31,080 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 20:01:32,714 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:01:39,778 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 20:01:41,773 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:01:48,780 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 20:01:50,450 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:01:57,377 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 20:01:59,151 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:02:06,178 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 20:02:07,781 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:02:14,710 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 20:02:16,402 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:02:23,393 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 20:02:24,941 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.7747, accuracy_top-5: 100.0000
2023-02-05 20:02:31,874 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 20:02:33,576 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:02:40,539 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 20:02:42,116 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:02:48,956 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 20:02:50,531 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:02:57,506 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 20:02:59,269 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:03:06,217 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 20:03:07,874 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:03:14,504 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 20:03:16,100 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:03:23,028 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 20:03:24,628 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:03:31,510 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 20:03:33,118 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:03:39,932 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 20:03:41,518 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:03:48,346 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 20:03:49,892 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 20:03:56,785 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 20:03:58,327 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:04:05,096 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 20:04:06,591 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:04:13,580 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 20:04:15,421 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 20:04:22,375 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 20:04:23,995 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.9507, accuracy_top-5: 100.0000
2023-02-05 20:04:30,876 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 20:04:32,404 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 20:04:39,168 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 20:04:40,738 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 20:04:47,461 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 20:04:49,053 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 95.7747, accuracy_top-5: 100.0000
